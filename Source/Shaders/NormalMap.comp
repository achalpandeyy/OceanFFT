#version 460 core

#define DISPLACEMENT_MAP_DIM 256.f

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 0, rgba32f) writeonly uniform image2D u_normal_map;

uniform sampler2D s_displacement_map_y;

void main()
{
	ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy);
	vec2 tex_coord = gl_GlobalInvocationID.xy / DISPLACEMENT_MAP_DIM;

	float texel_dim = 1.f / DISPLACEMENT_MAP_DIM;

	float z0 = texture(s_displacement_map_y, tex_coord + vec2(-texel_dim, -texel_dim)).r;
    float z1 = texture(s_displacement_map_y, tex_coord + vec2(0, -texel_dim)).r;
    float z2 = texture(s_displacement_map_y, tex_coord + vec2(texel_dim, -texel_dim)).r;
    float z3 = texture(s_displacement_map_y, tex_coord + vec2(-texel_dim, 0)).r;
    float z4 = texture(s_displacement_map_y, tex_coord + vec2(texel_dim, 0)).r;
    float z5 = texture(s_displacement_map_y, tex_coord + vec2(-texel_dim, texel_dim)).r;
    float z6 = texture(s_displacement_map_y, tex_coord + vec2(0, texel_dim)).r;
    float z7 = texture(s_displacement_map_y, tex_coord + vec2(texel_dim, texel_dim)).r;

    vec3 normal;

    // Sobel Filter
    normal.z = z0 + 2.f * z1 + z2 - z5 - 2.f * z6 - z7;
    normal.x = z0 + 2.f * z3 + z5 - z2 - 2.f * z4 - z7;
    normal.y = 1.f;

    imageStore(u_normal_map, pixel_pos, vec4(normalize(normal), 1.f));
}